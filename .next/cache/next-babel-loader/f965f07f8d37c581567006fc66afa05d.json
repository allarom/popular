{"ast":null,"code":"var _jsxFileName = \"/Users/ar/projects/popular/components/ForceLayout.jsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport dynamic from 'next/dynamic'; // import { select, hierarchy, tree, linkVertical, forceSimulation, forceCenter,  mouse,  forceX,  forceY, forceCollide, forceRadial} from \"d3\"\n\nimport * as d3 from 'd3';\nimport json from './lang';\nimport { forceManyBody, force } from 'd3-force';\nimport useResizeObserver from '../hooks/useResizeObeserver';\n\nvar Page = function Page(props) {\n  var svgRef = useRef();\n  var wrapperRef = useRef();\n  var dimensions = useResizeObserver(wrapperRef);\n  useEffect(function () {\n    console.log(dimensions);\n    if (!dimensions) return; // const svg = select(svgRef.current)\n\n    if (d3) {\n      console.log(\"d3\", d3);\n    } // const root = hierarchy(json)\n    // const nodeData = root.descendants()\n    // const linkData = root.links()\n    // var link = svg.selectAll(\".link\"),\n    // node = svg.selectAll(\".node\");\n    // update();\n    // function update() {\n    //   var nodes = root.descendants(),\n    //       links = root.links()\n    //   // Restart the force layout.\n    //   simulation = forceSimulation(nodes)\n    //   .force\n    //       .nodes(nodes)\n    //       .links(links)\n    //       .start();\n    //   // Update the links…\n    //   link = link.data(links, function(d) { return d.target.id; });\n    //   // Exit any old links.\n    //   link.exit().remove();\n    //   // Enter any new links.\n    //   link.enter().insert(\"line\", \".node\")\n    //       .attr(\"class\", \"link\")\n    //       .attr(\"x1\", function(d) { return d.source.x; })\n    //       .attr(\"y1\", function(d) { return d.source.y; })\n    //       .attr(\"x2\", function(d) { return d.target.x; })\n    //       .attr(\"y2\", function(d) { return d.target.y; });\n    //   // Update the nodes…\n    //   node = node.data(nodes, function(d) { return d.id; }).style(\"fill\", color);\n    //   // Exit any old nodes.\n    //   node.exit().remove();\n    //   // Enter any new nodes.\n    //   node.enter().append(\"circle\")\n    //       .attr(\"class\", \"node\")\n    //       .attr(\"cx\", function(d) { return d.x; })\n    //       .attr(\"cy\", function(d) { return d.y; })\n    //       .attr(\"r\", function(d) { return Math.sqrt(d.size) / 10 || 4.5; })\n    //       .style(\"fill\", color)\n    //       .on(\"click\", click)\n    //       .call(force.drag);\n    // }\n    // function tick() {\n    //   link.attr(\"x1\", function(d) { return d.source.x; })\n    //       .attr(\"y1\", function(d) { return d.source.y; })\n    //       .attr(\"x2\", function(d) { return d.target.x; })\n    //       .attr(\"y2\", function(d) { return d.target.y; });\n    //   node.attr(\"cx\", function(d) { return d.x; })\n    //       .attr(\"cy\", function(d) { return d.y; });\n    // }\n    // // Color leaf nodes orange, and packages white or blue.\n    // function color(d) {\n    //   return d._children ? \"#3182bd\" : d.children ? \"#c6dbef\" : \"#fd8d3c\";\n    // }\n    // // Toggle children on click.\n    // function click(d) {\n    //   if (!d3.event.defaultPrevented) {\n    //     if (d.children) {\n    //       d._children = d.children;\n    //       d.children = null;\n    //     } else {\n    //       d.children = d._children;\n    //       d._children = null;\n    //     }\n    //     update();\n    //   }\n    // }\n    // // Returns a list of all nodes under the root.\n    // function flatten(root) {\n    //   var nodes = [], i = 0;\n    //   function recurse(node) {\n    //     if (node.children) node.children.forEach(recurse);\n    //     if (!node.id) node.id = ++i;\n    //     nodes.push(node);\n    //   }\n    //   recurse(root);\n    //   return nodes;\n    // }\n    // const simulation = forceSimulation(nodeData)\n    // // force\n    // .force(\"center\", forceCenter(dimensions.width/2, dimensions.height/2))\n    // .force(\"charge\", forceManyBody().strength(-40))\n    // .force(\"collide\", forceCollide(60))\n    // .on(\"tick\", () => {\n    //   const linkGenerator = linkVertical()\n    //   .x(node => node.x)\n    //   .y(node => node.y + 100)\n    //   svg\n    //   .selectAll(\".node\")\n    //   .data(nodeData)\n    //   .join(\"circle\")\n    //   .attr(\"class\", \"node\")\n    //   .attr(\"r\", 5)\n    //   .attr(\"fill\", \"grey\")\n    //   .attr(\"cx\", node => node.x)\n    //   .attr(\"cy\", node => node.y + 100)\n    //   svg\n    //   .selectAll(\".link\")\n    //   .data(linkData)\n    //   .join(\"path\").attr(\"class\",\"link\")\n    //   .attr(\"fill\", \"none\")\n    //   .attr(\"stroke\", \"grey\")\n    //   .attr(\"d\", linkGenerator)\n    //   .attr(\"x1\", link => link.source.x)\n    //   .attr(\"y1\", link => link.source.y)\n    //   .attr(\"x2\", link => link.target.x)\n    //   .attr(\"y2\", link => link.target.y)\n    //   svg\n    //   .selectAll(\".label\")\n    //   .data(root.descendants())\n    //   .join(\"text\")\n    //   .attr(\"class\", \"label\")\n    //   .attr(\"fill\", \"black\")\n    //   .text(node => node.data.language)\n    //   .attr(\"font-size\", 16)\n    //   .attr(\"text-anchor\", \"middle\")\n    //   .attr(\"x\", node => node.x)\n    //   .attr(\"y\", node => node.y + 85)\n    // })\n    // svg.on(\"mousemove\", ()=> {\n    //   const [x,y] = mouse(svgRef.current)\n    //   simulation\n    //   .force(\"x\", forceX(x).strength(node => 0.2 + node.depth * 0.15))\n    //   .force(\"y\", forceY(y).strength(node => 0.2 + node.depth * 0.15))\n    // })\n    // svg.on(\"click\", () => {\n    //    const [x, y] = mouse(svgRef.current)\n    //    simulation\n    //    .alpha(0.5)\n    //    .restart()\n    //    .force(\"orbit\", forceRadial(100, x, y))\n    //    svg.selectAll(\".orbit\")\n    //    .data([json])\n    //    .join(\"circle\")\n    //    .attr(\"class\", \"orbit\")\n    //    .attr(\"fill\", \"none\")\n    //    .attr(\"r\", 500)\n    //    .attr(\"cx\", x)\n    //    .attr(\"cy\", y)\n    // })\n\n  }, [json, dimensions]);\n  return __jsx(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, __jsx(\"svg\", {\n    ref: svgRef,\n    height: \"100vh\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  })), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Forced Layout\"));\n};\n\nexport default Page;","map":{"version":3,"sources":["/Users/ar/projects/popular/components/ForceLayout.jsx"],"names":["React","useEffect","useState","useRef","dynamic","d3","json","forceManyBody","force","useResizeObserver","Page","props","svgRef","wrapperRef","dimensions","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAOC,OAAP,MAAoB,cAApB,C,CACA;;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,aAAT,EAAwBC,KAAxB,QAAqC,UAArC;AACA,OAAOC,iBAAP,MAA8B,6BAA9B;;AAGA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AACtB,MAAMC,MAAM,GAAGT,MAAM,EAArB;AACA,MAAMU,UAAU,GAAGV,MAAM,EAAzB;AACA,MAAMW,UAAU,GAAGL,iBAAiB,CAACI,UAAD,CAApC;AACDZ,EAAAA,SAAS,CAAC,YAAM;AACbc,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,QAAG,CAACA,UAAJ,EAAgB,OAFH,CAGb;;AACA,QAAGT,EAAH,EAAQ;AACNU,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBX,EAAlB;AACD,KANY,CAOfkB,IAAA,MAAM,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADH,EAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJD,EAKG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALH,CADD;AAUC,CA1LD;;AA4LA,eAAeF,IAAf","sourcesContent":["import React, {useEffect, useState, useRef} from 'react'\nimport dynamic from 'next/dynamic'\n// import { select, hierarchy, tree, linkVertical, forceSimulation, forceCenter,  mouse,  forceX,  forceY, forceCollide, forceRadial} from \"d3\"\nimport * as d3 from 'd3'\nimport json from './lang'\nimport { forceManyBody, force } from 'd3-force';\nimport useResizeObserver from '../hooks/useResizeObeserver'\n\n\nconst Page = (props) => {\n  const svgRef = useRef()\n  const wrapperRef = useRef()\n  const dimensions = useResizeObserver(wrapperRef)\n\tuseEffect(() => {\n    console.log(dimensions)\n    if(!dimensions) return\n    // const svg = select(svgRef.current)\n    if(d3 ) {\n      console.log(\"d3\", d3 )\n    }\n\t\t// const root = hierarchy(json)\n    // const nodeData = root.descendants()\n    // const linkData = root.links()\n    // var link = svg.selectAll(\".link\"),\n    // node = svg.selectAll(\".node\");\n\n    // update();\n\n    \n    // function update() {\n    //   var nodes = root.descendants(),\n    //       links = root.links()\n    \n    //   // Restart the force layout.\n    //   simulation = forceSimulation(nodes)\n    //   .force\n    //       .nodes(nodes)\n    //       .links(links)\n    //       .start();\n    \n    //   // Update the links…\n    //   link = link.data(links, function(d) { return d.target.id; });\n    \n    //   // Exit any old links.\n    //   link.exit().remove();\n    \n    //   // Enter any new links.\n    //   link.enter().insert(\"line\", \".node\")\n    //       .attr(\"class\", \"link\")\n    //       .attr(\"x1\", function(d) { return d.source.x; })\n    //       .attr(\"y1\", function(d) { return d.source.y; })\n    //       .attr(\"x2\", function(d) { return d.target.x; })\n    //       .attr(\"y2\", function(d) { return d.target.y; });\n    \n    //   // Update the nodes…\n    //   node = node.data(nodes, function(d) { return d.id; }).style(\"fill\", color);\n    \n    //   // Exit any old nodes.\n    //   node.exit().remove();\n    \n    //   // Enter any new nodes.\n    //   node.enter().append(\"circle\")\n    //       .attr(\"class\", \"node\")\n    //       .attr(\"cx\", function(d) { return d.x; })\n    //       .attr(\"cy\", function(d) { return d.y; })\n    //       .attr(\"r\", function(d) { return Math.sqrt(d.size) / 10 || 4.5; })\n    //       .style(\"fill\", color)\n    //       .on(\"click\", click)\n    //       .call(force.drag);\n    // }\n    \n    // function tick() {\n    //   link.attr(\"x1\", function(d) { return d.source.x; })\n    //       .attr(\"y1\", function(d) { return d.source.y; })\n    //       .attr(\"x2\", function(d) { return d.target.x; })\n    //       .attr(\"y2\", function(d) { return d.target.y; });\n    \n    //   node.attr(\"cx\", function(d) { return d.x; })\n    //       .attr(\"cy\", function(d) { return d.y; });\n    // }\n    \n    // // Color leaf nodes orange, and packages white or blue.\n    // function color(d) {\n    //   return d._children ? \"#3182bd\" : d.children ? \"#c6dbef\" : \"#fd8d3c\";\n    // }\n    \n    // // Toggle children on click.\n    // function click(d) {\n    //   if (!d3.event.defaultPrevented) {\n    //     if (d.children) {\n    //       d._children = d.children;\n    //       d.children = null;\n    //     } else {\n    //       d.children = d._children;\n    //       d._children = null;\n    //     }\n    //     update();\n    //   }\n    // }\n    \n    // // Returns a list of all nodes under the root.\n    // function flatten(root) {\n    //   var nodes = [], i = 0;\n    \n    //   function recurse(node) {\n    //     if (node.children) node.children.forEach(recurse);\n    //     if (!node.id) node.id = ++i;\n    //     nodes.push(node);\n    //   }\n    \n    //   recurse(root);\n    //   return nodes;\n    // }\n    \n    // const simulation = forceSimulation(nodeData)\n    // // force\n    // .force(\"center\", forceCenter(dimensions.width/2, dimensions.height/2))\n    // .force(\"charge\", forceManyBody().strength(-40))\n    // .force(\"collide\", forceCollide(60))\n    // .on(\"tick\", () => {\n    //   const linkGenerator = linkVertical()\n    //   .x(node => node.x)\n    //   .y(node => node.y + 100)\n  \n    //   svg\n    //   .selectAll(\".node\")\n    //   .data(nodeData)\n    //   .join(\"circle\")\n    //   .attr(\"class\", \"node\")\n    //   .attr(\"r\", 5)\n    //   .attr(\"fill\", \"grey\")\n    //   .attr(\"cx\", node => node.x)\n    //   .attr(\"cy\", node => node.y + 100)\n  \n    //   svg\n    //   .selectAll(\".link\")\n    //   .data(linkData)\n    //   .join(\"path\").attr(\"class\",\"link\")\n    //   .attr(\"fill\", \"none\")\n    //   .attr(\"stroke\", \"grey\")\n    //   .attr(\"d\", linkGenerator)\n    //   .attr(\"x1\", link => link.source.x)\n    //   .attr(\"y1\", link => link.source.y)\n    //   .attr(\"x2\", link => link.target.x)\n    //   .attr(\"y2\", link => link.target.y)\n  \n    //   svg\n    //   .selectAll(\".label\")\n    //   .data(root.descendants())\n    //   .join(\"text\")\n    //   .attr(\"class\", \"label\")\n    //   .attr(\"fill\", \"black\")\n    //   .text(node => node.data.language)\n    //   .attr(\"font-size\", 16)\n    //   .attr(\"text-anchor\", \"middle\")\n    //   .attr(\"x\", node => node.x)\n    //   .attr(\"y\", node => node.y + 85)\n  \n    // })\n\n    // svg.on(\"mousemove\", ()=> {\n    //   const [x,y] = mouse(svgRef.current)\n    //   simulation\n    //   .force(\"x\", forceX(x).strength(node => 0.2 + node.depth * 0.15))\n    //   .force(\"y\", forceY(y).strength(node => 0.2 + node.depth * 0.15))\n    // })\n\n    // svg.on(\"click\", () => {\n    //    const [x, y] = mouse(svgRef.current)\n    //    simulation\n    //    .alpha(0.5)\n    //    .restart()\n    //    .force(\"orbit\", forceRadial(100, x, y))\n\n    //    svg.selectAll(\".orbit\")\n    //    .data([json])\n    //    .join(\"circle\")\n    //    .attr(\"class\", \"orbit\")\n    //    .attr(\"fill\", \"none\")\n    //    .attr(\"r\", 500)\n    //    .attr(\"cx\", x)\n    //    .attr(\"cy\", y)\n    // })\n\t}, [json, dimensions])\n\nreturn (\n\t<React.Fragment>\n    <div ref={wrapperRef}>\n      \t<svg ref={svgRef} height=\"100vh\"></svg>\n    </div>\n\t\t<br/>\n    <h1>Forced Layout</h1>\n\t</React.Fragment>\n )\n\n}\n\nexport default Page\n"]},"metadata":{},"sourceType":"module"}