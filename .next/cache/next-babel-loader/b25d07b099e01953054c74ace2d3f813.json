{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport dynamic from 'next/dynamic';\nimport { select, hierarchy, tree, linkVertical, forceSimulation } from \"d3\";\nimport json from './lang';\n\nconst Page = props => {\n  const svgRef = useRef();\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const root = hierarchy(json);\n    const treeLayout = tree().size([1700, 600]);\n    treeLayout(root);\n    const linkGenerator = linkVertical().x(node => node.x).y(node => node.y + 100);\n    svg.selectAll(\".node\").data(root.descendants()).join(\"circle\").attr(\"class\", \"node\").attr(\"r\", 5).attr(\"fill\", \"grey\").attr(\"cx\", node => node.x).attr(\"cy\", node => node.y + 100);\n    svg.selectAll(\".link\").data(root.links()).join(\"path\").attr(\"class\", \"link\").attr(\"fill\", \"none\").attr(\"stroke\", \"grey\").attr(\"d\", linkGenerator);\n    svg.selectAll(\".label\").data(root.descendants()).join(\"text\").attr(\"class\", \"label\").attr(\"fill\", \"black\").text(node => node.data.language).attr(\"font-size\", 16).attr(\"text-anchor\", \"middle\").attr(\"x\", node => node.x).attr(\"y\", node => node.y + 85);\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(\"svg\", {\n    ref: svgRef,\n    width: \"2000px\",\n    height: \"2000px\"\n  }), __jsx(\"br\", null), __jsx(\"button\", {\n    onClick: () => setData(data.map(value => value + 5))\n  }, \"Update\"));\n};\n\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}