{"ast":null,"code":"var _jsxFileName = \"/Users/ar/projects/popular/components/Page.jsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport dynamic from 'next/dynamic';\nimport { select, hierarchy } from \"d3\";\n\nconst Page = props => {\n  // let [data, setData] = useState();\n  const svgRef = useRef();\n  let title = null;\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const data = props.props.map(e => {\n      const title = [];\n      const traffic = [];\n      title.push(e.title);\n      traffic.push(parseInt(e.traffic.match(/\\d+/)[0]));\n      return title, traffic;\n    });\n    const root = hierarchy(props.props);\n    console.log(\"root\", root.descendants());\n    console.log(\"root\", root.links());\n\n    const myX = () => {\n      const a = [50, 120, 230, 310, 360, 600];\n    };\n\n    const x = Math.random() * (2000 - 20 * 2) + 20;\n    const y = Math.random() * (2000 - 20 * 2) + 20; // setData(title)\n\n    console.log(data);\n    svg.selectAll(\"circle\").data(data).join(\"circle\").attr(\"r\", 20).attr(\"cx\", value => myX(value)).attr(\"cy\", y);\n  }, []);\n  return __jsx(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(\"svg\", {\n    ref: svgRef,\n    width: \"2000px\",\n    height: \"2000px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    onClick: () => setData(data.map(value => value + 5)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Update\"));\n};\n\nexport default Page;","map":{"version":3,"sources":["/Users/ar/projects/popular/components/Page.jsx"],"names":["React","useEffect","useState","useRef","dynamic","select","hierarchy","Page","props","svgRef","title","svg","current","data","map","e","traffic","push","parseInt","match","root","console","log","descendants","links","myX","a","x","Math","random","y","selectAll","join","attr","value","setData"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,IAAlC;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACvB;AACA,QAAMC,MAAM,GAAGN,MAAM,EAArB;AACA,MAAIO,KAAK,GAAG,IAAZ;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMU,GAAG,GAAGN,MAAM,CAACI,MAAM,CAACG,OAAR,CAAlB;AACA,UAAMC,IAAI,GAAGL,KAAK,CAACA,KAAN,CAAYM,GAAZ,CAAgBC,CAAC,IAAI;AACjC,YAAML,KAAK,GAAG,EAAd;AACA,YAAMM,OAAO,GAAG,EAAhB;AACAN,MAAAA,KAAK,CAACO,IAAN,CAAWF,CAAC,CAACL,KAAb;AACAM,MAAAA,OAAO,CAACC,IAAR,CAAaC,QAAQ,CAACH,CAAC,CAACC,OAAF,CAAUG,KAAV,CAAgB,KAAhB,EAAuB,CAAvB,CAAD,CAArB;AACA,aAAOT,KAAK,EAAEM,OAAd;AACA,KANY,CAAb;AAQA,UAAMI,IAAI,GAAGd,SAAS,CAACE,KAAK,CAACA,KAAP,CAAtB;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAAI,CAACG,WAAL,EAApB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAAI,CAACI,KAAL,EAApB;;AACA,UAAMC,GAAG,GAAG,MAAM;AACjB,YAAMC,CAAC,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,GAAzB,CAAV;AAEA,KAHD;;AAIA,UAAMC,CAAC,GAAGC,IAAI,CAACC,MAAL,MAAkB,OAAO,KAAK,CAA9B,IAAoC,EAA9C;AACA,UAAMC,CAAC,GAAGF,IAAI,CAACC,MAAL,MAAkB,OAAO,KAAK,CAA9B,IAAmC,EAA7C,CAlBe,CAmBf;;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACAF,IAAAA,GAAG,CAACoB,SAAJ,CAAc,QAAd,EACClB,IADD,CACMA,IADN,EAECmB,IAFD,CAEM,QAFN,EAGCC,IAHD,CAGM,GAHN,EAGW,EAHX,EAICA,IAJD,CAIM,IAJN,EAIYC,KAAK,IAAIT,GAAG,CAACS,KAAD,CAJxB,EAKCD,IALD,CAKM,IALN,EAKYH,CALZ;AAMA,GA3BQ,EA2BN,EA3BM,CAAT;AA6BD,SACC,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAK,IAAA,GAAG,EAAErB,MAAV;AAAmB,IAAA,KAAK,EAAC,QAAzB;AAAkC,IAAA,MAAM,EAAC,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,EAGC;AAAQ,IAAA,OAAO,EAAE,MAAM0B,OAAO,CAACtB,IAAI,CAACC,GAAL,CAASoB,KAAK,IAAIA,KAAK,GAAG,CAA1B,CAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHD,CADD;AAUC,CA5CD;;AA8CA,eAAe3B,IAAf","sourcesContent":["import React, {useEffect, useState, useRef} from 'react'\nimport dynamic from 'next/dynamic'\nimport { select, hierarchy } from \"d3\"\n\nconst Page = (props) => {\n\t// let [data, setData] = useState();\n\tconst svgRef = useRef();\n\tlet title = null\n\n\tuseEffect(() => {\n\t\tconst svg = select(svgRef.current);\n\t\tconst data = props.props.map(e => {\n\t\t\tconst title = []\n\t\t\tconst traffic = []\n\t\t\ttitle.push(e.title)\n\t\t\ttraffic.push(parseInt(e.traffic.match(/\\d+/)[0]))\n\t\t\treturn title, traffic\n\t\t});\n\n\t\tconst root = hierarchy(props.props)\n\t\tconsole.log(\"root\", root.descendants())\n\t\tconsole.log(\"root\", root.links())\n\t\tconst myX = () => {\n\t\t\tconst a = [50, 120, 230, 310, 360, 600]\n\n\t\t}\n\t\tconst x = Math.random() * ( 2000 - 20 * 2 ) + 20;\n\t\tconst y = Math.random() * ( 2000 - 20 * 2) + 20;\n\t\t// setData(title)\n\t\tconsole.log(data)\n\t\tsvg.selectAll(\"circle\")\n\t\t.data(data)\n\t\t.join(\"circle\")\t\n\t\t.attr(\"r\", 20)\n\t\t.attr(\"cx\", value => myX(value))\n\t\t.attr(\"cy\", y)\n\t}, [])\n\nreturn (\n\t<React.Fragment>\n\t\t<svg ref={svgRef}  width='2000px' height='2000px'></svg>\n\t\t<br/>\n\t\t<button onClick={() => setData(data.map(value => value + 5))}>\n\t\tUpdate\n\t\t</button>\n\t</React.Fragment>\n )\n\n}\n\nexport default Page\n"]},"metadata":{},"sourceType":"module"}