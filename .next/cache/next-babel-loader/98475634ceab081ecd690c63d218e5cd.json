{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nconst getWidth = () => window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n\nfunction useCurrentWitdh() {\n  // save current window width in the state object\n  let {\n    0: width,\n    1: setWidth\n  } = useState(getWidth()); // in this case useEffect will execute only once because\n  // it does not have any dependencies.\n\n  useEffect(() => {\n    // timeoutId for debounce mechanism\n    let timeoutId = null;\n\n    const resizeListener = () => {\n      // prevent execution of previous setTimeout\n      clearTimeout(timeoutId); // change width from the state object after 150 milliseconds\n\n      timeoutId = setTimeout(() => setWidth(getWidth()), 150);\n    }; // set resize listener\n\n\n    window.addEventListener('resize', resizeListener); // clean up function\n\n    return () => {\n      // remove resize listener\n      window.removeEventListener('resize', resizeListener);\n    };\n  }, []);\n  return width;\n}","map":{"version":3,"sources":["/Users/ar/projects/popular/hooks/useWindowSize.jsx"],"names":["useState","useEffect","getWidth","window","innerWidth","document","documentElement","clientWidth","body","useCurrentWitdh","width","setWidth","timeoutId","resizeListener","clearTimeout","setTimeout","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAG,MAAMC,MAAM,CAACC,UAAP,IAClBC,QAAQ,CAACC,eAAT,CAAyBC,WADP,IAElBF,QAAQ,CAACG,IAAT,CAAcD,WAFnB;;AAIA,SAASE,eAAT,GAA2B;AACzB;AACA,MAAI;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBX,QAAQ,CAACE,QAAQ,EAAT,CAAhC,CAFyB,CAIzB;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIW,SAAS,GAAG,IAAhB;;AACA,UAAMC,cAAc,GAAG,MAAM;AAC3B;AACAC,MAAAA,YAAY,CAACF,SAAD,CAAZ,CAF2B,CAG3B;;AACAA,MAAAA,SAAS,GAAGG,UAAU,CAAC,MAAMJ,QAAQ,CAACT,QAAQ,EAAT,CAAf,EAA6B,GAA7B,CAAtB;AACD,KALD,CAHc,CASd;;;AACAC,IAAAA,MAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkCH,cAAlC,EAVc,CAYd;;AACA,WAAO,MAAM;AACX;AACAV,MAAAA,MAAM,CAACc,mBAAP,CAA2B,QAA3B,EAAqCJ,cAArC;AACD,KAHD;AAID,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,SAAOH,KAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst getWidth = () => window.innerWidth \n  || document.documentElement.clientWidth \n  || document.body.clientWidth;\n\nfunction useCurrentWitdh() {\n  // save current window width in the state object\n  let [width, setWidth] = useState(getWidth());\n\n  // in this case useEffect will execute only once because\n  // it does not have any dependencies.\n  useEffect(() => {\n    // timeoutId for debounce mechanism\n    let timeoutId = null;\n    const resizeListener = () => {\n      // prevent execution of previous setTimeout\n      clearTimeout(timeoutId);\n      // change width from the state object after 150 milliseconds\n      timeoutId = setTimeout(() => setWidth(getWidth()), 150);\n    };\n    // set resize listener\n    window.addEventListener('resize', resizeListener);\n\n    // clean up function\n    return () => {\n      // remove resize listener\n      window.removeEventListener('resize', resizeListener);\n    }\n  }, [])\n\n  return width;\n}"]},"metadata":{},"sourceType":"module"}