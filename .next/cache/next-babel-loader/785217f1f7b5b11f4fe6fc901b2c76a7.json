{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\n\nconst HomePage = props => {\n  let {\n    0: windowsWidth,\n    1: setWidth\n  } = useState(0);\n  let {\n    0: windowsHeight,\n    1: setHeight\n  } = useState(0);\n  let list = null;\n  useEffect(() => {\n    setWidth(window.innerWidth);\n    setHeight(window.innerHeight); // Multiple Animated Circle - Get Canvas element by Id\n\n    var canvas = document.getElementById(\"myCanvas\"); // Set Canvas dimensions\n\n    canvas.width = windowsWidth;\n    canvas.height = windowsHeight; // Get drawing context\n\n    var ctx = canvas.getContext('2d'); // The Circle class\n\n    function Circle(x, y, dx, dy, radius, title, traffic) {\n      var _props$props;\n\n      this.x = x;\n      this.y = y;\n      this.dx = dx;\n      this.dy = dy;\n      this.title = title;\n      this.traffic = traffic;\n      this.radius = radius;\n      const allTraffic = (_props$props = props.props) === null || _props$props === void 0 ? void 0 : _props$props.map(el => el.traffic.match(/\\d+/)[0]);\n      this.highest = allTraffic[0];\n      const lowest = allTraffic[allTraffic.length - 1];\n\n      this.random_rgba = function () {\n        var o = Math.round,\n            r = Math.random,\n            s = 255;\n        return 'rgb(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ',' + r().toFixed(1) + ')';\n      };\n\n      var color = this.random_rgba();\n\n      this.draw = function () {\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n        ctx.fillStyle = `rgba(255,0,0,${this.traffic / this.highest})`;\n        ctx.fill();\n        ctx.fillStyle = \"black\";\n        ctx.font = \"16px Verdana\";\n        ctx.textAlign = 'center';\n        ctx.fillText(this.title, this.x, this.y);\n      };\n\n      this.update = function () {\n        if (this.x + this.radius > windowsWidth || this.x - this.radius < 0) {\n          this.dx = -this.dx;\n        }\n\n        if (this.y + this.radius > windowsHeight || this.y - this.radius < 0) {\n          this.dy = -this.dy;\n        }\n\n        this.x += this.dx;\n        this.y += this.dy;\n        this.draw();\n      };\n    }\n\n    var circles = []; // Radius\n\n    var radius = 70;\n\n    for (var i = 0; i < ((_props$props2 = props.props) === null || _props$props2 === void 0 ? void 0 : _props$props2.length); i++) {\n      var _props$props2;\n\n      // Starting Position\n      var x = Math.random() * (windowsWidth - radius * 2) + radius;\n      var y = Math.random() * (windowsHeight - radius * 2) + radius; // Speed in x and y direction\n\n      var dx = (Math.random() - 0.5) * 2;\n      var dy = (Math.random() - 0.5) * 2;\n      var title = props.props[i].title;\n      var traffic = props.props[i].traffic.match(/\\d+/)[0];\n      circles.push(new Circle(x, y, dx, dy, radius, title, traffic));\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n      ctx.clearRect(0, 0, windowsWidth, windowsHeight);\n\n      for (var r = 0; r < props.props.length; r++) {\n        circles[r].update();\n      }\n    }\n\n    animate();\n  });\n  return __jsx(\"div\", null, __jsx(\"canvas\", {\n    id: \"myCanvas\",\n    width: windowsWidth,\n    height: windowsHeight,\n    style: {\n      border: '1px solid black'\n    }\n  }));\n};\n\nexport default HomePage;","map":null,"metadata":{},"sourceType":"module"}