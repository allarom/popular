{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport dynamic from 'next/dynamic';\nimport { select, hierarchy, tree, linkVertical, forceSimulation } from \"d3\";\nimport json from './lang';\n\nvar Page = function Page(props) {\n  var svgRef = useRef();\n  useEffect(function () {\n    var svg = select(svgRef.current);\n    var root = hierarchy(json);\n    var treeLayout = tree().size([1700, 600]);\n    treeLayout(root);\n    var linkGenerator = linkVertical().x(function (node) {\n      return node.x;\n    }).y(function (node) {\n      return node.y + 100;\n    });\n    svg.selectAll(\".node\").data(root.descendants()).join(\"circle\").attr(\"class\", \"node\").attr(\"r\", 5).attr(\"fill\", \"grey\").attr(\"cx\", function (node) {\n      return node.x;\n    }).attr(\"cy\", function (node) {\n      return node.y + 100;\n    });\n    svg.selectAll(\".link\").data(root.links()).join(\"path\").attr(\"class\", \"link\").attr(\"fill\", \"none\").attr(\"stroke\", \"grey\").attr(\"d\", linkGenerator);\n    svg.selectAll(\".label\").data(root.descendants()).join(\"text\").attr(\"class\", \"label\").attr(\"fill\", \"black\").text(function (node) {\n      return node.data.language;\n    }).attr(\"font-size\", 16).attr(\"text-anchor\", \"middle\").attr(\"x\", function (node) {\n      return node.x;\n    }).attr(\"y\", function (node) {\n      return node.y + 85;\n    });\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(\"svg\", {\n    ref: svgRef,\n    width: \"2000px\",\n    height: \"2000px\"\n  }), __jsx(\"br\", null), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setData(data.map(function (value) {\n        return value + 5;\n      }));\n    }\n  }, \"Update\"));\n};\n\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}