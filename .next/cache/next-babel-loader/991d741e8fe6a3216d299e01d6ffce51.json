{"ast":null,"code":"import { useEffect, useState } from 'react';\nexport default function useWindowSize() {\n  const isClient = false;\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : null,\n      height: isClient ? window.innerHeight : null\n    };\n  }\n\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState(getSize);\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}","map":{"version":3,"sources":["/Users/ar/projects/popular/hooks/useWindowSize.jsx"],"names":["useEffect","useState","useWindowSize","isClient","getSize","width","window","innerWidth","height","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AAEA,eAAe,SAASC,aAAT,GAAyB;AACtC,QAAMC,QAAQ,QAAd;;AAEA,WAASC,OAAT,GAAmB;AACjB,WAAO;AACLC,MAAAA,KAAK,EAAEF,QAAQ,GAAGG,MAAM,CAACC,UAAV,GAAuB,IADjC;AAELC,MAAAA,MAAM,EAAEL,QAAQ,GAAGG,MAAM,CAACG,WAAV,GAAwB;AAFnC,KAAP;AAID;;AAED,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BV,QAAQ,CAACG,OAAD,CAA5C;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACG,QAAL,EAAe;AACb,aAAO,KAAP;AACD;;AAED,aAASS,YAAT,GAAwB;AACtBD,MAAAA,aAAa,CAACP,OAAO,EAAR,CAAb;AACD;;AAEDE,IAAAA,MAAM,CAACO,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMN,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACD,GAXQ,EAWN,EAXM,CAAT,CAZsC,CAuB9B;;AAER,SAAOF,UAAP;AACD","sourcesContent":["import {useEffect, useState} from 'react'\n\nexport default function useWindowSize() {\n  const isClient = typeof window === 'object';\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : null,\n      height: isClient ? window.innerHeight : null\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n    \n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}"]},"metadata":{},"sourceType":"module"}