{"ast":null,"code":"import { useEffect, useState } from 'react';\nexport default function useWindowSize() {\n  const isClient = false;\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : null,\n      height: isClient ? window.innerHeight : null\n    };\n  }\n\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState(getSize);\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    let timeoutId = null;\n\n    const resizeListener = () => {\n      // prevent execution of previous setTimeout\n      clearTimeout(timeoutId); // change width from the state object after 150 milliseconds\n\n      timeoutId = setTimeout(() => setWindowSize(getSize()), 150);\n    };\n\n    window.addEventListener('resize', resizeListener);\n    return () => window.removeEventListener('resize', resizeListener);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}","map":{"version":3,"sources":["/Users/ar/projects/popular/hooks/useWindowSize.jsx"],"names":["useEffect","useState","useWindowSize","isClient","getSize","width","window","innerWidth","height","innerHeight","windowSize","setWindowSize","timeoutId","resizeListener","clearTimeout","setTimeout","addEventListener","removeEventListener"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AAEA,eAAe,SAASC,aAAT,GAAyB;AACtC,QAAMC,QAAQ,QAAd;;AAEA,WAASC,OAAT,GAAmB;AACjB,WAAO;AACLC,MAAAA,KAAK,EAAEF,QAAQ,GAAGG,MAAM,CAACC,UAAV,GAAuB,IADjC;AAELC,MAAAA,MAAM,EAAEL,QAAQ,GAAGG,MAAM,CAACG,WAAV,GAAwB;AAFnC,KAAP;AAID;;AAED,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BV,QAAQ,CAACG,OAAD,CAA5C;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACG,QAAL,EAAe;AACb,aAAO,KAAP;AACD;;AAED,QAAIS,SAAS,GAAG,IAAhB;;AACA,UAAMC,cAAc,GAAG,MAAM;AAC3B;AACAC,MAAAA,YAAY,CAACF,SAAD,CAAZ,CAF2B,CAG3B;;AACAA,MAAAA,SAAS,GAAGG,UAAU,CAAC,MAAMJ,aAAa,CAACP,OAAO,EAAR,CAApB,EAAiC,GAAjC,CAAtB;AACD,KALD;;AAQAE,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCH,cAAlC;AACA,WAAO,MAAMP,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCJ,cAArC,CAAb;AACD,GAhBQ,EAgBN,EAhBM,CAAT,CAZsC,CA4B9B;;AAER,SAAOH,UAAP;AACD","sourcesContent":["import {useEffect, useState} from 'react'\n\nexport default function useWindowSize() {\n  const isClient = typeof window === 'object';\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : null,\n      height: isClient ? window.innerHeight : null\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n    \n    let timeoutId = null;\n    const resizeListener = () => {\n      // prevent execution of previous setTimeout\n      clearTimeout(timeoutId);\n      // change width from the state object after 150 milliseconds\n      timeoutId = setTimeout(() => setWindowSize(getSize()), 150);\n    };\n\n\n    window.addEventListener('resize', resizeListener);\n    return () => window.removeEventListener('resize', resizeListener);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}"]},"metadata":{},"sourceType":"module"}