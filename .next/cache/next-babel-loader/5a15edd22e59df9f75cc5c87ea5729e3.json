{"ast":null,"code":"export default function sketch(p) {\n  // let rotation = 0;\n  // p.setup = function () {\n  //   p.createCanvas(600, 400, p.WEBGL);\n  // };\n  // p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n  //   if (props.rotation){\n  //     rotation = props.rotation * Math.PI / 180;\n  //   }\n  // };\n  // p.draw = function () {\n  //   p.background(100);\n  //   p.normalMaterial();\n  //   p.noStroke();\n  //   p.push();\n  //   p.rotateY(rotation);\n  //   p.box(100);\n  //   p.pop();\n  // };\n  // an array for the nodes\n  var nodeCount = 100;\n  var nodes = []; // an array for the springs\n\n  var springs = []; // dragged node\n\n  var selectedNode = null;\n  var nodeDiameter = 16;\n\n  p.setup = function () {\n    p.createCanvas(p.windowWidth, p.windowHeight);\n    p.background(255);\n    p.noStroke();\n    initNodesAndSprings();\n  };\n\n  p.draw = function () {\n    p.background(255); // let all nodes repel each other\n\n    for (var i = 0; i < nodes.length; i++) {\n      nodes[i].attractNodes(nodes);\n    } // apply spring forces\n\n\n    for (var i = 0; i < springs.length; i++) {\n      springs[i].update();\n    } // apply velocity vector and update position\n\n\n    for (var i = 0; i < nodes.length; i++) {\n      nodes[i].update();\n    }\n\n    if (selectedNode != null) {\n      selectedNode.x = p.mouseX;\n      selectedNode.y = p.mouseY;\n    } // draw nodes\n\n\n    p.stroke(0, 130, 164);\n    p.strokeWeight(2);\n\n    for (var i = 0; i < springs.length; i++) {\n      p.line(springs[i].fromNode.x, springs[i].fromNode.y, springs[i].toNode.x, springs[i].toNode.y);\n    } // draw nodes\n\n\n    p.noStroke();\n\n    for (var i = 0; i < nodes.length; i++) {\n      p.fill(255);\n      p.ellipse(nodes[i].x, nodes[i].y, nodeDiameter, nodeDiameter);\n      p.fill(0);\n      p.ellipse(nodes[i].x, nodes[i].y, nodeDiameter - 4, nodeDiameter - 4);\n    }\n  };\n\n  var initNodesAndSprings = function initNodesAndSprings() {\n    // init nodes\n    nodes = [];\n    var rad = nodeDiameter / 2;\n    console.log(\"Node\", Node);\n\n    for (var i = 0; i < nodeCount; i++) {\n      var newNode = new Nodi(p.width / 2 + p.random(-200, 200), p.height / 2 + p.random(-200, 200));\n      newNode.minX = rad;\n      newNode.minY = rad;\n      newNode.maxX = p.width - rad;\n      newNode.maxY = p.height - rad;\n      newNode.radius = 100;\n      newNode.strength = -5;\n      nodes.push(newNode);\n    } // set springs randomly\n\n\n    springs = [];\n\n    for (var j = 0; j < nodes.length - 1; j++) {\n      var rCount = p.floor(p.random(1, 2));\n\n      for (var i = 0; i < rCount; i++) {\n        var r = p.floor(p.random(j + 1, nodes.length));\n        var newSpring = new Spring(nodes[j], nodes[r]);\n        newSpring.length = 20;\n        newSpring.stiffness = 1;\n        springs.push(newSpring);\n      }\n    }\n  };\n\n  p.mousePressed = function () {\n    // Ignore anything greater than this distance\n    var maxDist = 20;\n\n    for (var i = 0; i < nodes.length; i++) {\n      var checkNode = nodes[i];\n      var d = p.dist(p.mouseX, p.mouseY, checkNode.x, checkNode.y);\n\n      if (d < maxDist) {\n        selectedNode = checkNode;\n        maxDist = d;\n      }\n    }\n  };\n\n  p.mouseReleased = function () {\n    if (selectedNode != null) {\n      selectedNode = null;\n    }\n  };\n\n  p.keyPressed = function () {\n    if (p.key == 's' || p.key == 'S') p.saveCanvas(gd.timestamp(), 'png');\n\n    if (key == 'r' || key == 'R') {\n      p.background(255);\n      initNodesAndSprings();\n    }\n  }; // };\n  // var myp5 = new p5(sketch);\n\n}","map":{"version":3,"sources":["/Users/ar/projects/popular/components/sketch.jsx"],"names":["sketch","p","nodeCount","nodes","springs","selectedNode","nodeDiameter","setup","createCanvas","windowWidth","windowHeight","background","noStroke","initNodesAndSprings","draw","i","length","attractNodes","update","x","mouseX","y","mouseY","stroke","strokeWeight","line","fromNode","toNode","fill","ellipse","rad","console","log","Node","newNode","Nodi","width","random","height","minX","minY","maxX","maxY","radius","strength","push","j","rCount","floor","r","newSpring","Spring","stiffness","mousePressed","maxDist","checkNode","d","dist","mouseReleased","keyPressed","key","saveCanvas","gd","timestamp"],"mappings":"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","sourcesContent":["export default function sketch (p) {\n  // let rotation = 0;\n\n  // p.setup = function () {\n  //   p.createCanvas(600, 400, p.WEBGL);\n  // };\n\n  // p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n  //   if (props.rotation){\n  //     rotation = props.rotation * Math.PI / 180;\n  //   }\n  // };\n\n  // p.draw = function () {\n  //   p.background(100);\n  //   p.normalMaterial();\n  //   p.noStroke();\n  //   p.push();\n  //   p.rotateY(rotation);\n  //   p.box(100);\n  //   p.pop();\n  // };\n\n\n    // an array for the nodes\n    var nodeCount = 100;\n    var nodes = [];\n    // an array for the springs\n    var springs = [];\n  \n    // dragged node\n    var selectedNode = null;\n  \n    var nodeDiameter = 16;\n  \n    p.setup = function() {\n      p.createCanvas(p.windowWidth, p.windowHeight);\n      p.background(255);\n      p.noStroke();\n  \n      initNodesAndSprings();\n    };\n  \n    p.draw = function() {\n  \n      p.background(255);\n  \n      // let all nodes repel each other\n      for (var i = 0; i < nodes.length; i++) {\n        nodes[i].attractNodes(nodes);\n      }\n      // apply spring forces\n      for (var i = 0; i < springs.length; i++) {\n        springs[i].update();\n      }\n      // apply velocity vector and update position\n      for (var i = 0; i < nodes.length; i++) {\n        nodes[i].update();\n      }\n  \n      if (selectedNode != null) {\n        selectedNode.x = p.mouseX;\n        selectedNode.y = p.mouseY;\n      }\n  \n      // draw nodes\n      p.stroke(0, 130, 164);\n      p.strokeWeight(2);\n      for (var i = 0; i < springs.length; i++) {\n        p.line(springs[i].fromNode.x, springs[i].fromNode.y, springs[i].toNode.x, springs[i].toNode.y);\n      }\n      // draw nodes\n      p.noStroke();\n      for (var i = 0; i < nodes.length; i++) {\n        p.fill(255);\n        p.ellipse(nodes[i].x, nodes[i].y, nodeDiameter, nodeDiameter);\n        p.fill(0);\n        p.ellipse(nodes[i].x, nodes[i].y, nodeDiameter - 4, nodeDiameter - 4);\n      }\n  \n    };\n  \n    var initNodesAndSprings = function() {\n      // init nodes\n      nodes = [];\n  \n      var rad = nodeDiameter / 2;\n      console.log(\"Node\", Node)\n      for (var i = 0; i < nodeCount; i++) {\n        var newNode = new Nodi(p.width / 2 + p.random(-200, 200), p.height / 2 + p.random(-200, 200));\n        newNode.minX = rad;\n        newNode.minY = rad;\n        newNode.maxX = p.width - rad;\n        newNode.maxY = p.height - rad;\n        newNode.radius = 100;\n        newNode.strength = -5;\n        nodes.push(newNode);\n      }\n  \n      // set springs randomly\n      springs = [];\n  \n      for (var j = 0; j < nodes.length - 1; j++) {\n        var rCount = p.floor(p.random(1, 2));\n        for (var i = 0; i < rCount; i++) {\n          var r = p.floor(p.random(j + 1, nodes.length));\n          var newSpring = new Spring(nodes[j], nodes[r]);\n          newSpring.length = 20;\n          newSpring.stiffness = 1;\n          springs.push(newSpring);\n        }\n      }\n  \n    };\n  \n    p.mousePressed = function() {\n      // Ignore anything greater than this distance\n      var maxDist = 20;\n      for (var i = 0; i < nodes.length; i++) {\n        var checkNode = nodes[i];\n        var d = p.dist(p.mouseX, p.mouseY, checkNode.x, checkNode.y);\n        if (d < maxDist) {\n          selectedNode = checkNode;\n          maxDist = d;\n        }\n      }\n    };\n  \n    p.mouseReleased = function() {\n      if (selectedNode != null) {\n        selectedNode = null;\n      }\n    };\n  \n    p.keyPressed = function() {\n      if (p.key == 's' || p.key == 'S') p.saveCanvas(gd.timestamp(), 'png');\n  \n      if (key == 'r' || key == 'R') {\n        p.background(255);\n        initNodesAndSprings();\n      }\n    };\n  \n  // };\n  \n  // var myp5 = new p5(sketch);\n  \n}"]},"metadata":{},"sourceType":"module"}