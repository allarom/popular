{"ast":null,"code":"// export default function sketch (p) {\n//   // let rotation = 0;\n//   // p.setup = function () {\n//   //   p.createCanvas(600, 400, p.WEBGL);\n//   // };\n//   // p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n//   //   if (props.rotation){\n//   //     rotation = props.rotation * Math.PI / 180;\n//   //   }\n//   // };\n//   // p.draw = function () {\n//   //   p.background(100);\n//   //   p.normalMaterial();\n//   //   p.noStroke();\n//   //   p.push();\n//   //   p.rotateY(rotation);\n//   //   p.box(100);\n//   //   p.pop();\n//   // };\n//     // an array for the nodes\n//     var nodeCount = 100;\n//     var nodes = [];\n//     // an array for the springs\n//     var springs = [];\n//     // dragged node\n//     var selectedNode = null;\n//     var nodeDiameter = 16;\n//     p.setup = function() {\n//       p.createCanvas(p.windowWidth, p.windowHeight);\n//       p.background(255);\n//       p.noStroke();\n//       initNodesAndSprings();\n//     };\n//     p.draw = function() {\n//       p.background(255);\n//       // let all nodes repel each other\n//       for (var i = 0; i < nodes.length; i++) {\n//         nodes[i].attractNodes(nodes);\n//       }\n//       // apply spring forces\n//       for (var i = 0; i < springs.length; i++) {\n//         springs[i].update();\n//       }\n//       // apply velocity vector and update position\n//       for (var i = 0; i < nodes.length; i++) {\n//         nodes[i].update();\n//       }\n//       if (selectedNode != null) {\n//         selectedNode.x = p.mouseX;\n//         selectedNode.y = p.mouseY;\n//       }\n//       // draw nodes\n//       p.stroke(0, 130, 164);\n//       p.strokeWeight(2);\n//       for (var i = 0; i < springs.length; i++) {\n//         p.line(springs[i].fromNode.x, springs[i].fromNode.y, springs[i].toNode.x, springs[i].toNode.y);\n//       }\n//       // draw nodes\n//       p.noStroke();\n//       for (var i = 0; i < nodes.length; i++) {\n//         p.fill(255);\n//         p.ellipse(nodes[i].x, nodes[i].y, nodeDiameter, nodeDiameter);\n//         p.fill(0);\n//         p.ellipse(nodes[i].x, nodes[i].y, nodeDiameter - 4, nodeDiameter - 4);\n//       }\n//     };\n//     var initNodesAndSprings = function() {\n//       // init nodes\n//       nodes = [];\n//       var rad = nodeDiameter / 2;\n//       console.log(\"Node\", Node)\n//       for (var i = 0; i < nodeCount; i++) {\n//         var newNode = new Node(p.width / 2 + p.random(-200, 200), p.height / 2 + p.random(-200, 200));\n//         newNode.minX = rad;\n//         newNode.minY = rad;\n//         newNode.maxX = p.width - rad;\n//         newNode.maxY = p.height - rad;\n//         newNode.radius = 100;\n//         newNode.strength = -5;\n//         nodes.push(newNode);\n//       }\n//       // set springs randomly\n//       springs = [];\n//       for (var j = 0; j < nodes.length - 1; j++) {\n//         var rCount = p.floor(p.random(1, 2));\n//         for (var i = 0; i < rCount; i++) {\n//           var r = p.floor(p.random(j + 1, nodes.length));\n//           var newSpring = new Spring(nodes[j], nodes[r]);\n//           newSpring.length = 20;\n//           newSpring.stiffness = 1;\n//           springs.push(newSpring);\n//         }\n//       }\n//     };\n//     p.mousePressed = function() {\n//       // Ignore anything greater than this distance\n//       var maxDist = 20;\n//       for (var i = 0; i < nodes.length; i++) {\n//         var checkNode = nodes[i];\n//         var d = p.dist(p.mouseX, p.mouseY, checkNode.x, checkNode.y);\n//         if (d < maxDist) {\n//           selectedNode = checkNode;\n//           maxDist = d;\n//         }\n//       }\n//     };\n//     p.mouseReleased = function() {\n//       if (selectedNode != null) {\n//         selectedNode = null;\n//       }\n//     };\n//     p.keyPressed = function() {\n//       if (p.key == 's' || p.key == 'S') p.saveCanvas(gd.timestamp(), 'png');\n//       if (key == 'r' || key == 'R') {\n//         p.background(255);\n//         initNodesAndSprings();\n//       }\n//     };\n//   // };\n//   // var myp5 = new p5(sketch);\n// }","map":{"version":3,"sources":["/Users/ar/projects/popular/components/sketch.jsx"],"names":[],"mappingssourcesContent":["// export default function sketch (p) {\n//   // let rotation = 0;\n\n//   // p.setup = function () {\n//   //   p.createCanvas(600, 400, p.WEBGL);\n//   // };\n\n//   // p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n//   //   if (props.rotation){\n//   //     rotation = props.rotation * Math.PI / 180;\n//   //   }\n//   // };\n\n//   // p.draw = function () {\n//   //   p.background(100);\n//   //   p.normalMaterial();\n//   //   p.noStroke();\n//   //   p.push();\n//   //   p.rotateY(rotation);\n//   //   p.box(100);\n//   //   p.pop();\n//   // };\n\n\n//     // an array for the nodes\n//     var nodeCount = 100;\n//     var nodes = [];\n//     // an array for the springs\n//     var springs = [];\n  \n//     // dragged node\n//     var selectedNode = null;\n  \n//     var nodeDiameter = 16;\n  \n//     p.setup = function() {\n//       p.createCanvas(p.windowWidth, p.windowHeight);\n//       p.background(255);\n//       p.noStroke();\n  \n//       initNodesAndSprings();\n//     };\n  \n//     p.draw = function() {\n  \n//       p.background(255);\n  \n//       // let all nodes repel each other\n//       for (var i = 0; i < nodes.length; i++) {\n//         nodes[i].attractNodes(nodes);\n//       }\n//       // apply spring forces\n//       for (var i = 0; i < springs.length; i++) {\n//         springs[i].update();\n//       }\n//       // apply velocity vector and update position\n//       for (var i = 0; i < nodes.length; i++) {\n//         nodes[i].update();\n//       }\n  \n//       if (selectedNode != null) {\n//         selectedNode.x = p.mouseX;\n//         selectedNode.y = p.mouseY;\n//       }\n  \n//       // draw nodes\n//       p.stroke(0, 130, 164);\n//       p.strokeWeight(2);\n//       for (var i = 0; i < springs.length; i++) {\n//         p.line(springs[i].fromNode.x, springs[i].fromNode.y, springs[i].toNode.x, springs[i].toNode.y);\n//       }\n//       // draw nodes\n//       p.noStroke();\n//       for (var i = 0; i < nodes.length; i++) {\n//         p.fill(255);\n//         p.ellipse(nodes[i].x, nodes[i].y, nodeDiameter, nodeDiameter);\n//         p.fill(0);\n//         p.ellipse(nodes[i].x, nodes[i].y, nodeDiameter - 4, nodeDiameter - 4);\n//       }\n  \n//     };\n  \n//     var initNodesAndSprings = function() {\n//       // init nodes\n//       nodes = [];\n  \n//       var rad = nodeDiameter / 2;\n//       console.log(\"Node\", Node)\n//       for (var i = 0; i < nodeCount; i++) {\n//         var newNode = new Node(p.width / 2 + p.random(-200, 200), p.height / 2 + p.random(-200, 200));\n//         newNode.minX = rad;\n//         newNode.minY = rad;\n//         newNode.maxX = p.width - rad;\n//         newNode.maxY = p.height - rad;\n//         newNode.radius = 100;\n//         newNode.strength = -5;\n//         nodes.push(newNode);\n//       }\n  \n//       // set springs randomly\n//       springs = [];\n  \n//       for (var j = 0; j < nodes.length - 1; j++) {\n//         var rCount = p.floor(p.random(1, 2));\n//         for (var i = 0; i < rCount; i++) {\n//           var r = p.floor(p.random(j + 1, nodes.length));\n//           var newSpring = new Spring(nodes[j], nodes[r]);\n//           newSpring.length = 20;\n//           newSpring.stiffness = 1;\n//           springs.push(newSpring);\n//         }\n//       }\n  \n//     };\n  \n//     p.mousePressed = function() {\n//       // Ignore anything greater than this distance\n//       var maxDist = 20;\n//       for (var i = 0; i < nodes.length; i++) {\n//         var checkNode = nodes[i];\n//         var d = p.dist(p.mouseX, p.mouseY, checkNode.x, checkNode.y);\n//         if (d < maxDist) {\n//           selectedNode = checkNode;\n//           maxDist = d;\n//         }\n//       }\n//     };\n  \n//     p.mouseReleased = function() {\n//       if (selectedNode != null) {\n//         selectedNode = null;\n//       }\n//     };\n  \n//     p.keyPressed = function() {\n//       if (p.key == 's' || p.key == 'S') p.saveCanvas(gd.timestamp(), 'png');\n  \n//       if (key == 'r' || key == 'R') {\n//         p.background(255);\n//         initNodesAndSprings();\n//       }\n//     };\n  \n//   // };\n  \n//   // var myp5 = new p5(sketch);\n  \n// }"]},"metadata":{},"sourceType":"script"}